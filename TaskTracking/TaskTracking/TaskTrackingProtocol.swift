import Foundation

/// Трекер задач
/// Используется для отслеживания и дедупликации асинхронных операций в многопоточной среде.
///
/// Например:
/// `taskTracker.run(self.imageLoadingTask) { [weak self] in self.image = try? $0.get() }`
///
/// - Note:
///     - Многопоточность
///       - Все блоки, принимаемые от пользователя, вызываются исключительно на передаваемой очереди queue.
///       - Возвращаемые блоки и методы класса поддерживают вызов из разных потоков в произвольной манере.
///     - Владение и времена жизни:
///       - Время жизни трекера не ограничивает время жизни отдельной исполняемой задачи.
///       - Время жизни отдельной задачи не удлинняет время жизни трекера.
///       - Время жизни отдельной задачи не влияет на время жизни других задач.
public protocol TaskTracking {
    associatedtype Task: Identifiable
    associatedtype Output
    associatedtype Failure: Error

    /// Обязательный конструктор
    /// - Parameters:
    ///   - memoizationOptions: флаги мемоизации. Управляют поведением трекера для задач с одинаковыми идентификаторами. См. док. MemoizationOptions.
    ///   - queue: Callback-очередь. Вызовы абсолютно всех блоков в API этого класса должны осуществляться объектом трекера исключительно на этой очереди.
    ///   - worker: Блок worker. Вызвается на queue каждый раз, когда должна стартовать задача.
    ///     - Принимает на вход задачу и блок completion, который может быть вызван асинхронно (в любом потоке) для уведомления трекера о завершении задачи.
    ///     - Возвращает блок cancel, который будет вызван на queue в случае отмены операции.
    ///     - Выбрасывает произвольную ошибку, если задача ранее уже была завершена (в том числе извне). Новый результат при этом не будет учтён.
    init(
        memoizationOptions: MemoizationOptions,
        queue: DispatchQueue,
        worker: @escaping (Task, @escaping (Result<Output, Failure>) throws -> ()) -> () -> ()
    )

    /// Запустить задачу
    /// - Parameters:
    ///   - task: Задача, передаваемая в блок worker. Поле id будет использовано для сравнения с ранее выполнявшимися задачами.
    ///   - completion: Блок completion. Будет вызван на queue, когда результат выполнения задачи станет известен. Не будет вызван в случае успешной отмены блоком cancel.
    /// - Returns:
    ///     Блок cancel, который может быть вызван асинхронно (на любом потоке) для отмены операции.
    ///     Если вызов completion предотвратить не удалось, возвращает false.
    ///     Если для всех вызовов run, ожидающих одну и ту же задачу, будет вызван cancel, то вызовется блок cancel worker'а.
    ///     Полученный впоследствии результат не будет учтён.
    @discardableResult
    func run(_ task: Task, completion: @escaping (Result<Output, Failure>) -> ()) -> () -> Bool

    /// Завершить задачу
    /// - Parameters:
    ///   - taskId: Идентификатор задачи.
    ///   - result: Результат выполнения задачи.
    /// - Throws
    ///   Если задача уже была завершена, выбрасывает произвольную ошибку.
    func complete(_ taskId: Task.ID, result: Result<Output, Failure>) throws

    /// Получить результат для ранее завершённой задачи
    /// - Parameter taskId: Идентификатор задачи.
    /// - Returns
    ///     Если задача с заданным идентификатром уже была ранее завершена и её результат был запомнен согласно флагам memoizationOptions, возвращает этот результат.
    ///     В противном случае возвращает nil.
    func result(for taskId: Task.ID) -> Result<Output, Failure>?
}

/// Опции запоминания результатов задач в трекере
public struct MemoizationOptions: OptionSet {
    /// Запоминать начатые задачи
    /// Если этот флаг выставлен, TaskTracker осуществляет дедупликацию задач. Если задача с заданным идентификатором уже выполняется, нового вызова блока worker не происходит. Вместо этого переданный в метод start блок completion будет вызван вместе с блоком completion, переданным в вызов start, который привёл к старту задачи.
    /// Если любой другой флаг в этом перечислении выставлен, этот флаг также считается выставленным.
    public static let started = Self(rawValue: 1 << 1)

    /// Запоминать задачи, завершившиеся с ошибкой
    /// Если задача с заданным идентификатором ранее уже завершалась с ошибкой, блок completion должен быть вызван с результатом в виде этой ошибки. В противном случае поведение должно соответствовать остальным выставленным флагам.
    public static let failed = Self(rawValue: 1 << 2)

    /// Запоминать успешно завершённые задачи
    /// Если задача с заданным идентификатором ранее уже завершалась успешно с некоторым результатом, блок completion должен быть вызван с этим результатом. В противном случае поведение должно соответствовать остальным выставленным флагам.
    public static let succeeded = Self(rawValue: 1 << 3)

    /// Запоминать любые завершившиеся задачи
    /// Поведение соответствует обоим выставленным флагам: succeded и failed.
    public static let completed: Self = [.succeeded, .failed]

    public let rawValue: UInt32

    public init(rawValue: UInt32) {
        self.rawValue = rawValue
    }
}
